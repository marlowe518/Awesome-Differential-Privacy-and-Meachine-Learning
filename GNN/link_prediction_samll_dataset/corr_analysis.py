import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt


def val_test_trend(data_list):
    for data in data_list:
        arr = np.array(data)
        plt.plot(arr[:, 0], label="val")
        plt.plot(arr[:, 1], label="test")
        plt.grid()
        plt.legend(loc="best")
        plt.show()


def main():
    cols = ["dataset",
            "max_node_degree",
            "num_hop",
            "highest_val",
            "final_test",
            "best_epoch",
            "original_edges",
            "sampled_edges",
            "max_term_per_edge",
            "epsilon",
            "sigma",
            "lr",
            "max_norm",
            "batch_size",
            "train_samples"]
    data = pd.read_csv("./results/all_results_20230623140423.csv", header=0, usecols=cols)
    groups = data.groupby("dataset")
    for name, group in groups:
        print(name)
        correlation_matrix = group.corr()
        target_correlation = correlation_matrix["final_test"]
        print(target_correlation)
        sns.heatmap(correlation_matrix, fmt=".2g", linewidths=0, annot=True, cmap='coolwarm')
        plt.title(f"Correlation Matrix {name}")
        plt.show()


if __name__ == "__main__":
    # main()

    raw_data = \
        [(0.7525970924075694, 0.7313433007660939), (0.7557984944058198, 0.7341824763229339),
         (0.7633322206363091, 0.7421657866680791), (0.7672257009991251, 0.7465247155643466),
         (0.7686961876697823, 0.7486776994618691), (0.7665868594318339, 0.74745153483574),
         (0.7680372024494683, 0.7492476069641545), (0.7701350200285464, 0.7524609642144142),
         (0.7699580436484185, 0.7535293968651633), (0.7746759749528063, 0.7604396692464096),
         (0.7797895851558544, 0.7686751204865052), (0.7827607739767024, 0.7737720508150252),
         (0.7858485082186104, 0.7786364128294814), (0.7902369469128412, 0.7850838512391746),
         (0.7905319075463879, 0.7861799157688225), (0.7922613840416225, 0.7893011667560864),
         (0.7948066784842766, 0.7933308157621448), (0.7963879552465583, 0.7957946582972775),
         (0.7988397255858926, 0.7981445193319532), (0.8036324761729361, 0.8018506450892393),
         (0.8111359869238914, 0.8087528581724736), (0.8169776463004743, 0.8140800541584826),
         (0.8165747732400203, 0.8132177092711861), (0.8172035429808004, 0.8129955029117091),
         (0.8189704291173627, 0.8139188681982403), (0.821397739306598, 0.8155307278006636),
         (0.8252667595193149, 0.8186888212931259), (0.8281228417514619, 0.8212413161063921),
         (0.8317515769602651, 0.8241058208855557), (0.8326810626640269, 0.8241772032393773),
         (0.8315487015976795, 0.8218446121290132), (0.8293516045858466, 0.8187337230963363),
         (0.8264710622036004, 0.8151139469606083), (0.8223847783047101, 0.8109576518429311),
         (0.815594928403702, 0.805234398926041), (0.8142107716745707, 0.804570082504185),
         (0.8109129679082832, 0.8025022968999334), (0.811748929508725, 0.8046057736810959),
         (0.8166093052166308, 0.8110405474796272), (0.8206970279478798, 0.8172830494541552),
         (0.8263473226207467, 0.8248599409138323), (0.8344594594594594, 0.8344320842956519),
         (0.8428320249551084, 0.8437981399140189), (0.851426170634007, 0.8533771912655631),
         (0.8584059464063724, 0.8606443754159174), (0.863381428702979, 0.8653003470103459),
         (0.8696273999723745, 0.8701485904287777), (0.8737539711773101, 0.8743751165719891),
         (0.8761539435517288, 0.8765488243786856), (0.8777683134582623, 0.87793041832362)]
    data_list = [raw_data]
    val_test_trend(data_list)
